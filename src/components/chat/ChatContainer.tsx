import React, { useState, useEffect } from 'react';
import { styled } from 'styled-components';
import { useRecoilValue } from 'recoil';
import { debugModeState } from '@/store/debug';
import { TextMessage, SliderMessage } from '@/types/chat';
import ChatBubble from './ChatBubble';
import Slider from './Slider';

interface DebugProps {
  'data-debug'?: boolean;
  $inputEnabled?: boolean;
}

const ChatWrapper = styled.div<DebugProps>`
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background: #FAF7F2;
  position: relative;
  padding: 0 20px;
  
  ${props => props['data-debug'] && `
    border: 1px dashed #FF4444;
  `}
`;

const ContentSection = styled.div<DebugProps>`
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  position: relative;
  
  ${props => props['data-debug'] && `
    border: 1px dashed #44FF44;
  `}
`;

const MessageSection = styled.div<DebugProps>`
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  padding: ${props => props['data-debug'] ? '20px 0' : '0'};
  display: flex;
  flex-direction: column;
  position: relative;
  
  ${props => props['data-debug'] && `
    border: 1px dashed #4444FF;
  `}
`;

const InputSection = styled.div<DebugProps>`
  padding: 20px;
  border-top: 1px solid #E0E0E0;
  position: relative;
  display: ${props => props.$inputEnabled ? 'block' : 'none'};
  
  ${props => props['data-debug'] && `
    border: 1px dashed #FF8844;
  `}
`;

const ChatContainer: React.FC<DebugProps> = ({ 'data-debug': debug, $inputEnabled = false }) => {
  const debugMode = useRecoilValue(debugModeState);
  const [messages, setMessages] = useState<(TextMessage | SliderMessage)[]>([]);

  useEffect(() => {
    // Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî
    setMessages([]);
    
    // Ï¥àÍ∏∞ Î©îÏãúÏßÄ ÏÑ§Ï†ï
    const initialMessages: (TextMessage | SliderMessage)[] = [
      {
        id: `msg1_${Date.now()}`,
        type: 'jerry',
        timestamp: Date.now(),
        message: 'Í∞ÑÎã®ÌïòÍ≤å Ï∂îÏ≤úÌïú ÏÑ±Î∂ÑÏù¥ÏóêÏöî ‚ú®',
        showProfile: true,
        profileText: 'ÍπÄÏ†úÎ¶¨'
      },
      {
        id: `slider1_${Date.now()}`,
        type: 'slider',
        timestamp: Date.now() + 500,
        sliderData: [
          {
            id: '1',
            title: 'Ïò§Î©îÍ∞Ä3',
            description: 'ÌòàÌñâ Í∞úÏÑ†Ïóê ÎèÑÏõÄÏùÑ Ï§Ñ Ïàò ÏûàÏùå',
            icon: { emoji: 'üêü' },
            tags: ['ÌòàÌñâÍ∞úÏÑ†', 'EPA/DHA']
          },
          {
            id: '2',
            title: 'ÏΩîÏóîÏûêÏûÑQ10',
            description: 'Ìï≠ÏÇ∞Ìôî ÏûëÏö©',
            icon: { emoji: '‚ö°' },
            tags: ['Ìï≠ÏÇ∞Ìôî', 'Ïã¨Ïû•Í±¥Í∞ï']
          },
          {
            id: '3',
            title: 'ÎßàÍ∑∏ÎÑ§Ïäò',
            description: 'ÌòàÏïïÏóê ÎèÑÏõÄÏùÑ Ï§Ñ Ïàò ÏûàÏùå',
            icon: { emoji: 'üåø' },
            tags: ['ÌòàÏïï', 'Í∑ºÏú°']
          },
          {
            id: '4',
            title: 'ÎπÑÌÉÄÎØºD',
            description: 'Î©¥Ïó≠Î†• Ï¶ùÏßÑÏóê ÎèÑÏõÄ',
            icon: { emoji: '‚òÄÔ∏è' },
            tags: ['Î©¥Ïó≠Î†•', 'ÎºàÍ±¥Í∞ï']
          },
          {
            id: '5',
            title: 'ÏïÑÏó∞',
            description: 'Î©¥Ïó≠ Í∏∞Îä• Ïú†ÏßÄÏóê ÌïÑÏöî',
            icon: { emoji: 'üîã' },
            tags: ['Î©¥Ïó≠Î†•', 'Ìï≠ÏÇ∞Ìôî']
          }
        ]
      },
      {
        id: `msg2_${Date.now() + 1}`,
        type: 'jerry',
        timestamp: Date.now() + 1000,
        message: '1Ï∞® Î∂ÑÏÑù Í≤∞Í≥º 5Í∞úÏùò ÏÑ±Î∂ÑÏù¥ Ï∂îÏ≤úÎêòÏóàÏñ¥Ïöî. ÌòπÏãú ÌòàÏïïÏïΩÏùÑ ÎìúÏãúÎÇòÏöî?',
        showProfile: true,
        profileText: 'ÍπÄÏ†úÎ¶¨',
        link: {
          text: 'Ïù¥ ÏßàÎ¨∏ÏùÑ Ìïú Ïù¥Ïú†Îäî? ü§î',
          onClick: () => console.log('Link clicked'),
          position: {
            bottom: -24,
            align: 'right'
          }
        }
      },
      {
        id: `msg3_${Date.now() + 2}`,
        type: 'user',
        timestamp: Date.now() + 1500,
        message: 'Í≥ºÍ±∞/ÌòÑÏû¨Ïóê ÌòàÏïïÏïΩÏùÑ ÎìúÏãúÍ±∞ÎÇò ÎìúÏã§ ÏòàÏ†ïÏù∏Í∞ÄÏöî?',
        showProfile: false,
        buttons: [
          {
            text: 'ÎÑ§',
            onClick: () => console.log('Yes clicked'),
            variant: 'primary'
          },
          {
            text: 'ÏïÑÎãàÏò§',
            onClick: () => console.log('No clicked'),
            variant: 'secondary'
          }
        ]
      }
    ];

    // ÌÉÄÏù¥Î®∏ IDÎì§ÏùÑ Ï†ÄÏû•Ìï† Î∞∞Ïó¥
    const timerIds: NodeJS.Timeout[] = [];

    // Î©îÏãúÏßÄÎ•º ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÌëúÏãú
    initialMessages.forEach((message, index) => {
      const timerId = setTimeout(() => {
        setMessages(prev => [...prev, message]);
      }, index * 1500); // 1.5Ï¥à Í∞ÑÍ≤©ÏúºÎ°ú Î©îÏãúÏßÄ ÌëúÏãú
      timerIds.push(timerId);
    });

    // cleanup function
    return () => {
      timerIds.forEach(id => clearTimeout(id));
    };
  }, []);

  return (
    <ChatWrapper data-debug={debug || debugMode}>
      <ContentSection data-debug={debug || debugMode}>
        <MessageSection data-debug={debug || debugMode}>
          {messages.map((message) => (
            'type' in message && message.type !== 'slider' ? (
              <ChatBubble
                key={message.id}
                message={message}
              />
            ) : (
              <Slider
                key={message.id}
                items={(message as SliderMessage).sliderData}
                onComplete={() => {}}
              />
            )
          ))}
        </MessageSection>
        <InputSection data-debug={debug || debugMode} $inputEnabled={$inputEnabled}>
          {/* ÏûÖÎ†• ÏòÅÏó≠ */}
        </InputSection>
      </ContentSection>
    </ChatWrapper>
  );
};

export default ChatContainer; 