import React, { useState } from 'react';
import { styled } from '@mui/material/styles';
import { Typography } from '@mui/material';
import { HealthRecommendation, DetailInfo } from '@/types/health.types';
import { LoadingState, ChatBubbleMessage, ChatLinkMessage } from '@/types/chat';
import { colors } from '@/theme';
import RecommendationSlider from './RecommendationSlider';
import DetailDialog from './DetailDialog';
import ContainerHeader from '@/components/common/ContainerHeader';
import ChatBubble from './ChatBubble';

const ChatWrapper = styled('div')`
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: ${colors.dashboard.background};
  overflow: hidden;
`;

const ContentArea = styled('div')`
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
`;

const SliderSection = styled('div')`
  padding: 20px;
  background-color: ${colors.dashboard.background};
`;

const MessageArea = styled('div')`
  flex: 1;
  overflow-y: auto;
  padding: 20px;
  background-color: ${colors.dashboard.background};
  display: flex;
  flex-direction: column;
`;

const DialogContainer = styled('div')`
  position: absolute;
  inset: 0;
  z-index: 100;
  width: 100%;
  height: 100%;
  pointer-events: none;
  
  & > * {
    pointer-events: auto;
  }
`;

const ScrollIndicator = styled('div')`
  position: absolute;
  bottom: 20px;
  right: 20px;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: ${colors.primary};
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.3s ease;
  
  &.visible {
    opacity: 1;
    transform: translateY(0);
  }
`;

interface SplashOverlayProps {
  show: boolean;
  children: React.ReactNode;
}

const SplashOverlay = styled('div')<SplashOverlayProps>`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 10;
  opacity: ${props => props.show ? 0.8 : 0};
  transition: opacity 0.8s ease-in-out;
  pointer-events: none;
  animation: ${props => props.show ? 'fadeInOut 2s ease-in-out' : 'none'};

  @keyframes fadeInOut {
    0% { opacity: 0; }
    30% { opacity: 0.8; }
    50% { opacity: 0.5; }
    70% { opacity: 0.8; }
    100% { opacity: 0; }
  }
`;

const SplashImage = styled('img')`
  width: 120px;
  height: auto;
  opacity: 0.7;
  filter: brightness(1.1);
  margin-bottom: 8px;
  transition: all 0.3s ease;
`;

const SplashText = styled(Typography)`
  color: ${colors.brown};
  font-size: 13px;
  opacity: 0.8;
  text-align: center;
  background: rgba(255, 255, 255, 0.9);
  padding: 4px 12px;
  border-radius: 4px;
`;

const ChatContainer: React.FC = () => {
  const [messages, setMessages] = useState<Array<{
    message: ChatBubbleMessage;
    link?: ChatLinkMessage;
  }>>([]);
  const [loading, setLoading] = useState<LoadingState>({ isLoading: false });
  const [selectedDetail, setSelectedDetail] = useState<DetailInfo | null>(null);
  const [showSplash, setShowSplash] = useState(true);

  const detailsData: { [key: string]: DetailInfo } = {
    'ÌîÑÎ°úÎ∞îÏù¥Ïò§Ìã±Ïä§': {
      title: 'ÌîÑÎ°úÎ∞îÏù¥Ïò§Ìã±Ïä§',
      description: 'Ïû•ÎÇ¥ Ïú†ÏùµÍ∑†ÏùÑ ÎäòÎ†§ÏÑú Ïû• Í±¥Í∞ïÏùÑ Í∞úÏÑ†ÌïòÎäîÎç∞ ÎèÑÏõÄÏù¥ Îê† Ïàò ÏûàÏñ¥Ïöî',
      benefits: [
        'Ïû•ÎÇ¥ ÎØ∏ÏÉùÎ¨º Í∑†ÌòïÏùÑ ÎßûÏ∂∞Ï§òÏöî',
        'Î©¥Ïó≠Î†•ÏùÑ ÎÜíÏó¨Ï£ºÍ≥† ÏóºÏ¶ù Î∞òÏùëÏùÑ Ï§ÑÏó¨Ï§òÏöî',
        'ÏòÅÏñëÏÜå Ìù°ÏàòÍ∞Ä Ïûò ÎêòÎèÑÎ°ù ÎèÑÏôÄÏ§òÏöî',
        'Ïû•Î≤ΩÏùÑ ÌäºÌäºÌïòÍ≤å ÎßåÎì§Ïñ¥Ï§òÏöî'
      ],
      usage: 'ÌïòÎ£® 1Ìöå, 1Ìè¨Î•º Í≥µÎ≥µÏóê Î¨ºÍ≥º Ìï®Íªò ÎìúÏÑ∏Ïöî',
      warnings: [
        'Î©¥Ïó≠Î†•Ïù¥ ÎßéÏù¥ ÏïΩÌïòÏã† Î∂ÑÎì§ÏùÄ ÏùòÏÇ¨ÏôÄ ÏÉÅÎã¥ÌïòÏÑ∏Ïöî',
        'ÎÉâÏû• Î≥¥Í¥ÄÌïòÏãúÍ≥†, Ïú†ÌÜµÍ∏∞ÌïúÎèÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
        'Ìï≠ÏÉùÏ†úÏôÄÎäî 2ÏãúÍ∞Ñ Ïù¥ÏÉÅ Í∞ÑÍ≤©ÏùÑ ÎëêÏÑ∏Ïöî'
      ],
      references: [
        {
          title: 'ÌîÑÎ°úÎ∞îÏù¥Ïò§Ìã±Ïä§ÏôÄ Ïû•ÎÇ¥ ÎØ∏ÏÉùÎ¨º Ïó∞Íµ¨ üìö',
          url: 'https://www.ncbi.nlm.nih.gov/probiotics'
        },
        {
          title: 'Ïú†ÏÇ∞Í∑†Ïùò Î©¥Ïó≠Î†• Ï¶ùÏßÑ Ìö®Í≥º üî¨',
          url: 'https://www.health.org/immunity'
        }
      ]
    },
    // ... Îã§Î•∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Îì§ÎèÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä
  };

  const handleYes = () => {
    const userResponse = {
      message: {
        type: 'user' as const,
        message: "Ïòà",
        showProfile: false,
        consecutive: false
      }
    };
    
    const jerryResponse = {
      message: {
        type: 'jerry' as const,
        message: "ÏïåÍ≤†ÏäµÎãàÎã§. Í∑∏Îüº ÌòàÏïïÏïΩÍ≥º ÏÉÅÌò∏ÏûëÏö©Ïù¥ ÏóÜÎäî ÏòÅÏñëÏ†úÎ•º Ï∂îÏ≤úÌï¥ÎìúÎ¶¥Í≤åÏöî.",
        showProfile: true,
        consecutive: false
      }
    };
    
    setMessages(prev => [...prev.slice(0, -1), userResponse, jerryResponse]);
  };

  const handleNo = () => {
    const userResponse = {
      message: {
        type: 'user' as const,
        message: "",
        showProfile: false,
        consecutive: false,
        buttons: [
          { text: "ÏïÑÎãàÏò§", variant: 'primary' as const }
        ]
      }
    };
    
    const jerryResponse = {
      message: {
        type: 'jerry' as const,
        message: "ÏïåÍ≤†ÏäµÎãàÎã§. Í∑∏Îüº Ï∂îÏ≤úÌï¥ÎìúÎ¶∞ Î™®Îì† ÏÑ±Î∂ÑÏùÑ ÏÑ≠Ï∑®ÌïòÏÖîÎèÑ Ï¢ãÏïÑÏöî.",
        showProfile: true,
        consecutive: false
      }
    };
    
    setMessages(prev => [...prev, userResponse, jerryResponse]);
  };

  const handleSliderComplete = () => {
    setShowSplash(true);
    setMessages([]);

    const timer = setTimeout(() => {
      setShowSplash(false);
      
      setTimeout(() => {
        const initialMessages = [
          {
            message: {
              type: 'jerry' as const,
              message: "Í∞ÑÎã®ÌïòÍ≤å Ï∂îÏ≤úÌïú ÏÑ±Î∂ÑÏù¥ÏóêÏöî.\n\nÌòπÏãú ÌòàÏïïÏïΩÏùÑ Î≥µÏö©Ï§ëÏù¥Ïã†Í∞ÄÏöî? ü§î",
              showProfile: true,
              consecutive: false
            },
            link: {
              text: "Ïù¥ ÏßàÎ¨∏ÏùÑ Ïôú Ìï†ÍπåÏöî?",
              onClick: handleLinkClick,
              position: {
                align: 'right' as const,
                bottom: 24
              }
            }
          },
          {
            message: {
              type: 'user' as const,
              message: "Î≥µÏö©Ï§ëÏù¥Í±∞ÔøΩ Î≥µÏö©ÏòàÏ†ïÏù¥Ïã†Í∞ÄÏöî?",
              showProfile: false,
              consecutive: false,
              buttons: [
                { text: "Ïòà", onClick: handleYes, variant: 'primary' as const },
                { text: "ÏïÑÎãàÏò§", onClick: handleNo, variant: 'secondary' as const }
              ]
            }
          }
        ];
        setMessages(initialMessages);
      }, 500);
    }, 3000);

    return () => clearTimeout(timer);
  };

  const handleCardClick = (ingredient: string) => {
    const detail = detailsData[ingredient];
    if (detail) {
      setSelectedDetail(detail);
    }
  };

  const handleLinkClick = () => {
    // Implementation for handleLinkClick
  };

  return (
    <ChatWrapper>
      <ContainerHeader title="Ï†úÎ¶¨Î¥áÏù¥ Îã®Ïàú Ï∂îÏ≤úÌïú ÏÑ±Î∂ÑÏù¥ÏóêÏöî" />
      <ContentArea>
        <SliderSection>
          <RecommendationSlider 
            onCardClick={handleCardClick}
            show={true}
            onLoadComplete={handleSliderComplete}
          />
          {showSplash && (
            <SplashOverlay show={showSplash}>
              <SplashImage src="/assets/splash.png" alt="Jerry Bot" />
              <SplashText>ÏÉÅÌò∏ Í∞ÑÏÑ≠ Í≥ÑÏÇ∞Ï§ë...</SplashText>
            </SplashOverlay>
          )}
        </SliderSection>
        <MessageArea>
          {messages.map((item, index) => (
            <ChatBubble
              key={index}
              message={item.message}
              link={item.link}
            />
          ))}
        </MessageArea>
      </ContentArea>
      {selectedDetail && (
        <DetailDialog
          open={!!selectedDetail}
          onClose={() => setSelectedDetail(null)}
          detail={selectedDetail}
        />
      )}
    </ChatWrapper>
  );
};

export default ChatContainer; 