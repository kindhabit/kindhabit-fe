import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Box, Paper, Typography, Chip } from '@mui/material';
import styled from '@emotion/styled';
import { Theme as MuiTheme, useTheme } from '@mui/material/styles';
import { Recommendation } from '@/types/health.types';
import { colors } from '@/theme';
import { debounce } from 'lodash';
import SectionTitle from '@/components/common/SectionTitle';

// Theme ÌÉÄÏûÖ Ï†ïÏùò
const defaultTheme = {
  typography: {
    fontFamily: 'Pretendard, sans-serif'
  },
  palette: {
    text: {
      primary: colors.textPrimary,
      secondary: colors.textSecondary
    }
  }
};

const IngredientTitle = styled(Typography)`
  font-family: 'Pretendard';
  font-size: 18px;
  font-weight: 600;
  color: ${colors.brown};
  margin-bottom: 12px;
`;

const ReasonText = styled(Typography)`
  font-family: 'Pretendard';
  font-size: 14px;
  color: ${colors.textSecondary};
  line-height: 1.6;
`;

const ReasonContainer = styled(Box)`
  background: rgba(0, 0, 0, 0.03);
  padding: 12px;
  border-radius: 12px;
  margin-bottom: 16px;
`;

const Divider = styled(Box)`
  height: 1px;
  background: rgba(0, 0, 0, 0.06);
  margin: 16px 0;
`;

const SliderContainer = styled('div')<{ $show: boolean }>`
  display: flex;
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  touch-action: pan-x pinch-zoom;
  -webkit-overflow-scrolling: touch;
  scroll-snap-type: x mandatory;
  margin: 0 -16px;
  padding: 0 16px;
  opacity: ${props => props.$show ? 1 : 0};
  transition: opacity 0.5s ease;
  
  &::-webkit-scrollbar {
    display: none;
  }
`;

const CardList = styled('div')`
  display: flex;
  gap: 16px;
  width: max-content;  // Ïπ¥ÎìúÎì§Ïù¥ Ìïú Ï§ÑÎ°ú ÎÇòÏó¥ÎêòÎèÑÎ°ù
`;

const Card = styled(Paper)`
  width: 200px;
  padding: 16px;
  border-radius: 16px;
  cursor: pointer;
  background: white;
  transition: transform 0.2s;
  
  &:hover {
    transform: translateY(-2px);
  }
`;

const CardFooter = styled(Box)`
  margin-top: auto;
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
`;

const TagChip = styled(Chip)`
  height: 28px;
  padding: 0 12px;
  background: rgba(25, 118, 210, 0.08);
  color: #1976d2;
  font-size: 13px;
  border-radius: 14px;
  font-weight: 500;
  transition: all 0.2s ease;

  &:hover {
    transform: scale(1.05);
    background: rgba(25, 118, 210, 0.12);
  }
`;

const DotContainer = styled(Box)`
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 16px;
  padding: 8px;  // Ìò∏Î≤Ñ ÏòÅÏó≠ ÌôïÏû•
`;

const Dot = styled(Box, {
  shouldForwardProp: (prop) => prop !== 'active'
})<{ active: boolean }>(({ active }) => ({
  width: 6,
  height: 6,
  borderRadius: '50%',
  backgroundColor: active ? colors.primary : 'rgba(107, 68, 35, 0.2)',
  transform: active ? 'scale(1.2)' : 'scale(1)',
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  cursor: 'pointer',
  
  '&:hover': {
    transform: 'scale(1.3)',
    backgroundColor: colors.primary,
  }
}));

const SliderWrapper = styled('div')<{ $show: boolean }>`
  padding: 20px 16px;
  background: ${colors.dashboard.background};
  opacity: ${props => props.$show ? 1 : 0};
  transition: opacity 0.5s ease;
`;

const SlideCard = styled(Paper)<{ delay: number }>`
  padding: 24px;
  border-radius: 24px;
  background: #ffffff;
  margin-right: 12px;
  min-width: 260px;
  min-height: 220px;
  display: flex;
  flex-direction: column;
  box-shadow: 0 4px 16px rgba(107, 68, 35, 0.08);
  border: 1px solid rgba(107, 68, 35, 0.12);
  transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
  scroll-snap-align: start;
  opacity: 0;
  animation: slideIn 0.5s ease forwards;
  animation-delay: ${props => props.delay}ms;
  transform-origin: center bottom;
  
  &:first-of-type {
    margin-left: 0;
  }
  
  &:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 32px rgba(107, 68, 35, 0.16);
    border-color: ${colors.primary}40;
    background: linear-gradient(to bottom, #ffffff, ${colors.primary}05);
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.98);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
`;

const IconContainer = styled(Box)`
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.03);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 12px;
  transition: all 0.3s ease;

  ${SlideCard}:hover & {
    transform: scale(1.1) rotate(5deg);
    background: ${colors.primary}10;
  }
`;

interface RecommendationSliderProps {
  onCardClick: (ingredient: string) => void;
  show: boolean;
  onLoadComplete?: () => void;
}

const RecommendationSlider: React.FC<RecommendationSliderProps> = ({ 
  onCardClick, 
  show = true,
  onLoadComplete
}) => {
  const [activeIndex, setActiveIndex] = useState(0);
  const sliderRef = useRef<HTMLDivElement>(null);
  const [selectedCard, setSelectedCard] = useState<string | null>(null);

  const recommendations: Recommendation[] = [
    {
      ingredient: 'ÌîÑÎ°úÎ∞îÏù¥Ïò§Ìã±Ïä§',
      reason: 'Ïû• Í±¥Í∞ï Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌï¥Ïöî',
      icon: 'ü¶†',
      tags: ['Ïû•ÎÇ¥ ÎØ∏ÏÉùÎ¨º Î∂ÄÏ°±Ïöî', 'Î©¥Ïó≠Î†• Ï†ÄÌïòÏöî']
    },
    {
      ingredient: 'Ïò§Î©îÍ∞Ä3',
      reason: 'ÏΩúÎ†àÏä§ÌÖåÎ°§ ÏàòÏπòÍ∞Ä ÎÜíÏïÑÏöî',
      icon: '‚ù§Ô∏è',
      tags: ['ÏàòÏπò Ïù¥ÏÉÅÏù¥ÏóêÏöî', 'ÌòàÍ¥Ä Í±¥Í∞ïÌï¥Ïöî']
    },
    {
      ingredient: 'ÎßàÍ∑∏ÎÑ§Ïäò',
      reason: 'Í∑ºÏú° Í≤ΩÎ†®Ïù¥ Ïû¶ÏúºÏãúÎÑ§Ïöî',
      icon: 'üí™',
      tags: ['ÏàòÎ©¥ Ïßà Í∞úÏÑ†Ìï¥Ïöî', 'Í∑ºÏú° ÌîºÎ°úÌï¥Ïöî']
    },
    {
      ingredient: 'ÎπÑÌÉÄÎØº D',
      reason: 'Ïã§ÎÇ¥ ÌôúÎèôÏù¥ ÎßéÏúºÏãúÎÑ§Ïöî',
      icon: '‚òÄÔ∏è',
      tags: ['Î©¥Ïó≠Î†• Ï†ÄÌïòÏöî', 'Îºà Í±¥Í∞ïÌï¥Ïöî']
    },
    {
      ingredient: 'Î£®ÌÖåÏù∏',
      reason: 'ÎîîÏßÄÌÑ∏ Í∏∞Í∏∞ ÏÇ¨Ïö©Ïù¥ ÎßéÏïÑÏöî',
      icon: 'üëÅÔ∏è',
      tags: ['ÏãúÎ†• Ï†ÄÌïòÏöî', 'Ï≤≠Í¥ë ÎÖ∏Ï∂úÏù¥ÏóêÏöî']
    }
  ];

  const handleScroll = useCallback(() => {
    const slider = sliderRef.current;
    if (!slider) return;

    const cardWidth = 260 + 12; // Ïπ¥Îìú ÎÑàÎπÑ + ÎßàÏßÑ
    const scrollLeft = slider.scrollLeft;
    const maxScroll = slider.scrollWidth - slider.clientWidth;
    
    // ÎÅùÏóê ÎèÑÎã¨ÌñàÏùÑ Îïå Ï≤òÎ¶¨
    if (Math.abs(scrollLeft - maxScroll) < 10) {
      requestAnimationFrame(() => {
        setActiveIndex(recommendations.length - 1);
      });
      return;
    }

    const newIndex = Math.round(scrollLeft / cardWidth);
    requestAnimationFrame(() => {
      setActiveIndex(Math.min(newIndex, recommendations.length - 1));
    });
  }, [recommendations.length]);

  useEffect(() => {
    const slider = sliderRef.current;
    if (!slider) return;

    slider.addEventListener('scroll', handleScroll, { passive: true });
    
    const resizeObserver = new ResizeObserver(() => {
      handleScroll();
    });
    resizeObserver.observe(slider);

    return () => {
      slider.removeEventListener('scroll', handleScroll);
      resizeObserver.disconnect();
    };
  }, [handleScroll]);

  const scrollToCard = (index: number) => {
    const slider = sliderRef.current;
    if (!slider) return;

    const cardWidth = 260 + 12;
    slider.scrollTo({
      left: index * cardWidth,
      behavior: 'smooth'
    });
  };

  const handleCardClick = (ingredient: string) => {
    console.log('Card clicked:', ingredient);
    setSelectedCard(ingredient);
    onCardClick(ingredient);
  };

  useEffect(() => {
    // ÎßàÏßÄÎßâ Ïπ¥ÎìúÏùò Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÎÅùÎÇòÎ©¥ onLoadComplete Ìò∏Ï∂ú
    const lastCardDelay = recommendations.length * 150 + 500; // ÎßàÏßÄÎßâ Ïπ¥Îìú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å ÏãúÍ∞Ñ
    const timer = setTimeout(() => {
      onLoadComplete?.();
    }, lastCardDelay);

    return () => clearTimeout(timer);
  }, []);

  return (
    <SliderWrapper $show={show}>
      <SliderContainer $show={show} ref={sliderRef}>
        {recommendations.map((rec, index) => (
          <SlideCard 
            key={index} 
            delay={index * 150}
            elevation={0}
            onClick={() => handleCardClick(rec.ingredient)}
            sx={{ 
              cursor: 'pointer',
              ...(selectedCard === rec.ingredient && {
                borderColor: `${colors.primary}40`,
                background: `${colors.primary}05`,
              })
            }}
          >
            <IconContainer>
              <Typography fontSize="20px">{rec.icon}</Typography>
            </IconContainer>
            <IngredientTitle>
              {rec.ingredient}
            </IngredientTitle>
            <ReasonContainer>
              <ReasonText>
                {rec.reason}
              </ReasonText>
            </ReasonContainer>
            <Divider />
            <CardFooter>
              {rec.tags.map((tag, idx) => (
                <TagChip 
                  key={idx} 
                  label={tag}
                  size="small"
                />
              ))}
            </CardFooter>
          </SlideCard>
        ))}
      </SliderContainer>
      <DotContainer>
        {recommendations.map((_, index) => (
          <Dot 
            key={index} 
            active={index === activeIndex}
            onClick={() => scrollToCard(index)}
            onMouseEnter={() => scrollToCard(index)}  // Ìò∏Î≤Ñ Ïãú Ïä§ÌÅ¨Î°§
          />
        ))}
      </DotContainer>
    </SliderWrapper>
  );
};

export default RecommendationSlider; 